// <auto-generated />
using System;
using Grow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Grow.Data.GrowMigrations
{
    [DbContext(typeof(GrowContext))]
    [Migration("20220207031123_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22");

            modelBuilder.Entity("Grow.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Grow.Models.DietaryRestrictions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Restriction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("DietaryRestrictions");
                });

            modelBuilder.Entity("Grow.Models.FileContent", b =>
                {
                    b.Property<int>("FileContentID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("MimeType")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.HasKey("FileContentID");

                    b.ToTable("FileContent");
                });

            modelBuilder.Entity("Grow.Models.FinancialStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("FinancialStatuses");
                });

            modelBuilder.Entity("Grow.Models.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Grow.Models.Household", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("CityID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("IncomeTotal")
                        .HasColumnType("REAL");

                    b.Property<bool>("LICOVerified")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LICOVerifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MembershipNumber")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumOfMembers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Households");
                });

            modelBuilder.Entity("Grow.Models.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConsentVerified")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DOB")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("DataConsent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(75);

                    b.Property<int>("GenderID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HouseholdID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("IncomeAmount")
                        .HasColumnType("REAL");

                    b.Property<bool>("IncomeVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(75);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.HasKey("ID");

                    b.HasIndex("GenderID");

                    b.HasIndex("HouseholdID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Grow.Models.MemberRestrictions", b =>
                {
                    b.Property<int>("DietaryRestrictionsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("DietaryRestrictionsID", "MemberID");

                    b.HasIndex("MemberID");

                    b.ToTable("MemberRestrictions");
                });

            modelBuilder.Entity("Grow.Models.MemberStatus", b =>
                {
                    b.Property<int>("FinancialStatusID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("IncomeAmount")
                        .HasColumnType("REAL");

                    b.Property<int?>("MemberDocumentsID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("FinancialStatusID", "MemberID");

                    b.HasIndex("MemberDocumentsID");

                    b.HasIndex("MemberID");

                    b.ToTable("MemberStatuses");
                });

            modelBuilder.Entity("Grow.Models.MembershipChanges", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HouseholdID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("HouseholdID");

                    b.ToTable("MembershipChanges");
                });

            modelBuilder.Entity("Grow.Models.Province", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Grow.Models.TransactionDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ExtendedCost")
                        .HasColumnType("REAL");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TransactionsID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UnitCost")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("TransactionsID");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("Grow.Models.Transactions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HouseholdID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("TransactionTotal")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("HouseholdID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Grow.Models.UploadedFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("UploadedFiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UploadedFile");
                });

            modelBuilder.Entity("Grow.Models.Volunteer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApartmentNum")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("CityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(75);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(75);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("StreetNum")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<double>("VolunteerHours")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("Grow.Models.MemberDocument", b =>
                {
                    b.HasBaseType("Grow.Models.UploadedFile");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MemberID");

                    b.HasDiscriminator().HasValue("MemberDocument");
                });

            modelBuilder.Entity("Grow.Models.FileContent", b =>
                {
                    b.HasOne("Grow.Models.UploadedFile", "UploadedFile")
                        .WithOne("FileContent")
                        .HasForeignKey("Grow.Models.FileContent", "FileContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grow.Models.Household", b =>
                {
                    b.HasOne("Grow.Models.City", "City")
                        .WithMany("Households")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Grow.Models.Province", "Province")
                        .WithMany("Households")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grow.Models.Member", b =>
                {
                    b.HasOne("Grow.Models.Gender", "Gender")
                        .WithMany("Members")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Grow.Models.Household", "Household")
                        .WithMany("Members")
                        .HasForeignKey("HouseholdID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Grow.Models.MemberRestrictions", b =>
                {
                    b.HasOne("Grow.Models.DietaryRestrictions", "DietaryRestrictions")
                        .WithMany("MemberRestrictions")
                        .HasForeignKey("DietaryRestrictionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Grow.Models.Member", "Member")
                        .WithMany("MemberRestrictions")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grow.Models.MemberStatus", b =>
                {
                    b.HasOne("Grow.Models.FinancialStatus", "FinancialStatus")
                        .WithMany("MemberStatus")
                        .HasForeignKey("FinancialStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Grow.Models.MemberDocument", "MemberDocuments")
                        .WithMany()
                        .HasForeignKey("MemberDocumentsID");

                    b.HasOne("Grow.Models.Member", "Member")
                        .WithMany("MemberStatus")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grow.Models.MembershipChanges", b =>
                {
                    b.HasOne("Grow.Models.Household", "Household")
                        .WithMany("MembershipChanges")
                        .HasForeignKey("HouseholdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grow.Models.TransactionDetails", b =>
                {
                    b.HasOne("Grow.Models.Transactions", "Transactions")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionsID");
                });

            modelBuilder.Entity("Grow.Models.Transactions", b =>
                {
                    b.HasOne("Grow.Models.Household", "Household")
                        .WithMany("Transactions")
                        .HasForeignKey("HouseholdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grow.Models.Volunteer", b =>
                {
                    b.HasOne("Grow.Models.City", "City")
                        .WithMany("Volunteers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Grow.Models.Province", "Province")
                        .WithMany("Volunteers")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grow.Models.MemberDocument", b =>
                {
                    b.HasOne("Grow.Models.Member", "Member")
                        .WithMany("MemberDocuments")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
